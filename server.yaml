openapi: 3.0.2
info:
  contact:
    email: apiteam@swagger.io
  description: 'This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You
    can find out more about

    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the
    pet store, we''ve switched to the design first approach!

    You can now help us improve the API whether it''s by making changes to the definition
    itself or to the code.

    That way, with time, we can improve the API in general, and expose some of the
    new features in OAS3.


    Some useful links:

    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)

    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)'
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.5
servers:
- url: /api/v3
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
paths:
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: getInventory
      x-jvm-package: store
      responses:
        '200':
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
        500:
          description: 'Plain error message'
          content:
            text/plain:
              schema:
                type: string
      security:
      - api_key: []
      summary: Returns pet inventories by status
      tags:
      - store
  /store/order:
    post:
      description: Place a new order in the store
      operationId: placeOrder
      x-jvm-package: store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        '405':
          description: Invalid input
      summary: Place an order for a pet
      tags:
      - store
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      x-jvm-package: store
      parameters:
      - description: ID of the order that needs to be deleted
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '202':
          description: Successfully deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
    get:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generated exceptions
      operationId: getOrderById
      x-jvm-package: store
      parameters:
      - description: ID of order that needs to be fetched
        in: path
        name: orderId
        required: true
        schema:
          format: int64
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
      summary: Find purchase order by ID
      tags:
      - store
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
  schemas:
    Address:
      properties:
        city:
          example: Palo Alto
          type: string
        state:
          example: CA
          type: string
        street:
          example: 437 Lytton
          type: string
        zip:
          example: '94301'
          type: string
      type: object
      xml:
        name: address
    ApiResponse:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        type:
          type: string
      type: object
      xml:
        name: '##default'
    Category:
      properties:
        id:
          example: 1
          format: int64
          type: integer
        name:
          example: Dogs
          type: string
      type: object
      xml:
        name: category
    Customer:
      properties:
        address:
          items:
            $ref: '#/components/schemas/Address'
          type: array
          xml:
            name: addresses
            wrapped: true
        id:
          example: 100000
          format: int64
          type: integer
        username:
          example: fehguy
          type: string
      type: object
      xml:
        name: customer
    Order:
      properties:
        complete:
          type: boolean
        id:
          example: 10
          format: int64
          type: integer
        petId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          example: approved
          type: string
      type: object
      xml:
        name: order
    Pet:
      properties:
        category:
          $ref: '#/components/schemas/Category'
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
          xml:
            wrapped: true
      required:
      - name
      - photoUrls
      type: object
      xml:
        name: pet
    Tag:
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
      xml:
        name: tag
    User:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: '12345'
          type: string
        phone:
          example: '12345'
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
  securitySchemes:
    api_key:
      in: header
      name: api_key
      type: apiKey
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            read:pets: read your pets
            write:pets: modify pets in your account
      type: oauth2
